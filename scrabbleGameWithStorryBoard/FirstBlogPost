




//function returns an array of words that can be created using the letters inputed to "letters to add"
//newWord and newWordList both start out empty when you call the function
func allPermutations(lettersToAdd:Character[], newWord:Character[], inout newWordList:String[]) -> String[]
{
    var lettersCopy = lettersToAdd
    var newWordCopy = newWord
    let newWordString:String = convertToString(newWord)
    if (self.isRealWord(newWordString)) {
        newWordList.append(newWordString)
    }
    for i in 0..lettersCopy.count{
        var addLetter = lettersCopy[i]
        lettersCopy.removeAtIndex(i)
        newWordCopy.append(addLetter)
        allPermutations(lettersCopy, newWord: newWordCopy, newWordList: &newWordList)
        lettersCopy = lettersToAdd
        newWordCopy = newWord
    }
    return newWordList
}

The function works by removing each letter from the lettersToAdd array and adding it to the newWord array and running the function recursivily on each one of these newWords and reduced sets of lettersToAdd. This is demonstrated best by a simple depiction of the recursive tree. In this image the arrays on the left are the "lettersToAdd", and the arrays on the right are the "newWord" arrays. As you can see the new words contain all the possible combinations of abc and each subset.  


                                   [a,      b,      c] []
                                  /         |          \
                               /            |            \
                             /              |               \
                          /                 |                 \
                    [b, c] [a]          [a, c] [b]             [a,b] [c]
                    /   |                   /\                     |   \
                  /     |                  /  \                    |     \
                /       |                 /    \                   |       \
              /         |                /      \                  |         \
            /           |               /        \                 |           \
          /             |              /          \                |             \
[c] [a, b]          [b] [a, c]   [c] [b, a]      [a] [b, c]   [b] [c,a]       [a] [c,b] 
    |                   |             |               |            |                |
[] [a,b,c]          [] [a,c,b]   [] [b,a,c]     [] [b, c, a]  [] [c,a,b]       [] [c,b,a] 

This algorithm is nice because it is straight forward and doesn't create any duplicates (if there is only one of each letter). However it is also incredibly slow for long sets of letters. The run time is N! + (N - 1)! + (N - 2)! + ... (N - N)!) * logbase2(lengthOfDictionary). You have to multiply by log2(lengthOfDictionary) because there is a dictionary look up for every new word.



My first attemt to make this algorithm faster lead me down an incorrect path. Because I wanted to find the longest word that could be formed from a given set of letters I concluded that a solution that built from the bottom up would not be the most efficient. So insted of adding letters to newWord array I created an algorithm which was based on swapping letters. This algorithm is effective in creating all permutations of a set of letters without duplicates but does not find subset permutations. It also takes the same number of steps to create the full length permutations as my first algorthm so effectively it doesn't really build solutions from the top down as I had hoped. 


//Solution by swapping
//Failed attempt at making algorithm faster

-(NSString *)largestRealWord:(NSMutableArray *)lettersToAdd
                   withCount:(NSInteger)count
{
    NSMutableArray *allSwapsForCount = [self allEllemensIn:lettersToAdd moveToIndex:count];
    if (count == [lettersToAdd count] + 1){
        NSString *arrayAsString = [self convertArrayToString:lettersToAdd];
        if ([self isDictionaryWord:arrayAsString]){
            NSLog(@"%@",arrayAsString);
            return arrayAsString;
        }else{
            return nil;
        }
    }
    for (NSMutableArray *newSwap in allSwapsForCount){
        [self largestRealWord:newSwap withCount:count + 1];
    }
    return nil;
}

-(NSMutableArray *)allEllemensIn:(NSMutableArray *)letterArray
                     moveToIndex:(NSInteger)index
{
    NSMutableArray *outputArray = [[NSMutableArray alloc]init];
    for (NSInteger i = index + 1; i < [letterArray count]; i++){
        NSMutableArray *newCombination = [letterArray mutableCopy];
        [newCombination exchangeObjectAtIndex:index withObjectAtIndex:i];
        [outputArray addObject:newCombination];
    }
    [outputArray addObject:letterArray];
    return outputArray;
}



#####################################

THE VERY LONG BUT VERY FAST SOLUTION:

#####################################


After attemting to make my first algorith more efficient I realised that there was probably no significantly faster way to create all permutations for a given set of letters. However I also realised that I was not trying to create all permutations, I was trying to create all permutations that were dictionary words. This important distinctin lead me to the conclusion that instead of having the dictionary look up proccess and the permutation generation algorthm work independnt of each other I should have each prosses inform the other. I eventually deveoped the algorithm to use 


This lead me to the key realisation that I needed to synchronise the prosses of creating all permutations with the dictionary look up process. 

//Verry quick solution for generating all possible words for a given set of letters

//used binary search to determine weather item is in array
//Verry quick solution for generating all possible words for a given set of letters
-(BOOL)binarySearchForItem:(NSString *)item
                      From:(NSInteger)start
                        To:(NSInteger)finish
                   inArray:(NSArray *)array
{
    
    NSInteger middle = ((finish - start) / 2) + start;
    NSString *middleItem = array[middle];
    NSComparisonResult compare = [item compare:middleItem];
    if (ABS(start - finish) < 2){
        if ([item isEqualToString:array[start]]){
            return YES;
        }else if ([item isEqualToString:array[finish]]){
            return YES;
        }
        else{
            return NO;
        }
    }
    if (compare == NSOrderedSame){
        return YES;
    }else if (compare == NSOrderedAscending){
        return [self binarySearchForItem:item From:start To:middle inArray:array];
    }else{
        return [self binarySearchForItem:item From:middle To:finish inArray:array];
    }
}

//This function uses binary search
//returns a range where all the words beggining with the letters in item can be found
//If no words begging with item are found it returns a range of (-1,-1)
-(NSRange)searchForStartingSequence:(NSString *)item
                       inDictionary:(NSArray *)array
                              start:(NSInteger)start
                             finish:(NSInteger)finish;
{
    NSInteger middle = ((finish - start) / 2) + start;
    NSString *middleItem = array[middle];
    if ([middleItem length] > [item length]){
        middleItem = [middleItem substringToIndex:([item length])];
    }
    NSComparisonResult compare = [item compare:middleItem];
    if (ABS(start - finish) < 2){
        if ([item isEqualToString:array[start]] || [item isEqualToString:array[start]]){
            return NSMakeRange(start, (finish - start));
        }
        else{
            return NSMakeRange(-1, -1); //returns -1 -1 if starting sequence does not exist in dictionary
        }
    }
    if (compare == NSOrderedSame){
        return NSMakeRange(start, (finish - start));
    }else if (compare == NSOrderedAscending){
        return [self searchForStartingSequence:item inDictionary:array start:start finish:middle];
    }else{
        return [self searchForStartingSequence:item inDictionary:array start:middle finish:finish];
    }
}


//Searches makes all permutaions from lettersToAdd
//Adds each letter from letters to add as the next letter in newWord and runs recursively on each combination
//remove the letter added to newWord from lettersToAdd for that path
//Function also checks the dictionary for each newWord to see if there are any words that start with newWord
//if not the recursive branch is pruned.
//If a word is found startinf with newWord the range is updated to contain the range of words in the dictionary
//containing all the words starting with newWord. This narrows down the section of the dictionary
//needed to search to determine if the word is in the dictionary.

-(NSString *)allPermutationsFromLetters:(NSMutableArray *)lettersToAdd
                              toNewWord:(NSMutableArray *)newWord
                         runningLongest:(NSString *)runningLongest
                    withDictionaryRange:(NSRange)range
                      englishDictionary:(NSArray *)dictionary
{

    NSRange newRange = range;
    if ([newWord count] > 0){
        NSRange newRange = [self searchForStartingSequence:[self convertArrayToString:newWord] inDictionary:dictionary start:range.location finish:(range.location + range.length)];
        if (newRange.length == -1){
            return @""; // returns empty string if the no words begin with the letters in newWord
        }else{
            NSString *wordAsString = [self convertArrayToString:newWord];
            if ([self binarySearchForItem:wordAsString From:newRange.location To:(newRange.location + newRange.length) inArray:dictionary]){
               //NSLog(@"%@",wordAsString);
            }
        }
    }
    NSArray *distinctLetters = [self allDistinctFrom:lettersToAdd];
    for (NSInteger i = 0; i < [distinctLetters count]; i++){
        NSMutableArray *lettersToAddCopy = [lettersToAdd mutableCopy];
        NSMutableArray *newWordCopy = [newWord mutableCopy];
        NSString *letterToTransfer = distinctLetters[i];
        [lettersToAdd removeObjectAtIndex:[lettersToAdd indexOfObject:letterToTransfer]];
        [newWord addObject:letterToTransfer];
        [self allPermutationsFromLetters:lettersToAdd toNewWord:newWord runningLongest:runningLongest withDictionaryRange:newRange englishDictionary:dictionary];
        newWord = newWordCopy;
        lettersToAdd = lettersToAddCopy;
    }
    return runningLongest;
}

-(NSRange)startingSequenceIsInDictionary:(NSArray *)startingSequence
                                forRange:(NSRange)range
                         usingDictionary:(NSArray *)dictionary
{
    NSString *startingSequenceString = [self convertArrayToString:startingSequence];
    return [self searchForStartingSequence:startingSequenceString inDictionary:dictionary start:range.location finish:(range.location + range.length)];
}

//returns an array of all the distinct items in the input array
-(NSArray *)allDistinctFrom:(NSMutableArray *)arrayWithDuplicates
{
    NSMutableArray *distinctArray = [[NSMutableArray alloc]init];
    for (NSString *item in arrayWithDuplicates){
        if (![distinctArray containsObject:item]){
            [distinctArray addObject:item];
        }
    }
    return distinctArray;
}

//main function which the user would pass the letters to.
-(NSString *)makeLargestFormLetters:(NSString *)letters{
    NSMutableArray *lettersArray = [self convertWordToLetterArray:letters];
    AppDelegate *appD = (AppDelegate *)[[UIApplication sharedApplication] delegate];
    NSRange fullRange = NSMakeRange(0, ([appD.allWords count] - 1));
    NSString *runningLongest = @"";
    [self allPermutationsFromLetters:lettersArray toNewWord:[@[] mutableCopy] runningLongest:runningLongest withDictionaryRange:fullRange englishDictionary:appD.allWords];
    return runningLongest;
}



